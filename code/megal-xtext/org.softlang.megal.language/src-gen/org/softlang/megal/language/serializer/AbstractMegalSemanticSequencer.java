/*
 * generated by Xtext
 */
package org.softlang.megal.language.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.softlang.megal.MegalAnnotation;
import org.softlang.megal.MegalEntity;
import org.softlang.megal.MegalEntityType;
import org.softlang.megal.MegalFile;
import org.softlang.megal.MegalLink;
import org.softlang.megal.MegalPackage;
import org.softlang.megal.MegalPair;
import org.softlang.megal.MegalRelationship;
import org.softlang.megal.MegalRelationshipType;
import org.softlang.megal.QueryEntity;
import org.softlang.megal.QueryParam;
import org.softlang.megal.QueryPos;
import org.softlang.megal.QueryReference;
import org.softlang.megal.QueryStatement;
import org.softlang.megal.QueryString;
import org.softlang.megal.Selection;
import org.softlang.megal.language.services.MegalGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractMegalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MegalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MegalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MegalPackage.MEGAL_ANNOTATION:
				sequence_MegalAnnotation(context, (MegalAnnotation) semanticObject); 
				return; 
			case MegalPackage.MEGAL_ENTITY:
				sequence_MegalEntity(context, (MegalEntity) semanticObject); 
				return; 
			case MegalPackage.MEGAL_ENTITY_TYPE:
				sequence_MegalEntityType(context, (MegalEntityType) semanticObject); 
				return; 
			case MegalPackage.MEGAL_FILE:
				sequence_MegalFile(context, (MegalFile) semanticObject); 
				return; 
			case MegalPackage.MEGAL_LINK:
				sequence_MegalLink(context, (MegalLink) semanticObject); 
				return; 
			case MegalPackage.MEGAL_PAIR:
				sequence_MegalPair(context, (MegalPair) semanticObject); 
				return; 
			case MegalPackage.MEGAL_RELATIONSHIP:
				sequence_MegalRelationship(context, (MegalRelationship) semanticObject); 
				return; 
			case MegalPackage.MEGAL_RELATIONSHIP_TYPE:
				sequence_MegalRelationshipType(context, (MegalRelationshipType) semanticObject); 
				return; 
			case MegalPackage.QUERY_ENTITY:
				sequence_QueryEntity(context, (QueryEntity) semanticObject); 
				return; 
			case MegalPackage.QUERY_PARAM:
				sequence_QueryParam(context, (QueryParam) semanticObject); 
				return; 
			case MegalPackage.QUERY_POS:
				sequence_QueryPos(context, (QueryPos) semanticObject); 
				return; 
			case MegalPackage.QUERY_REFERENCE:
				sequence_QueryReference(context, (QueryReference) semanticObject); 
				return; 
			case MegalPackage.QUERY_STATEMENT:
				sequence_QueryStatement(context, (QueryStatement) semanticObject); 
				return; 
			case MegalPackage.QUERY_STRING:
				sequence_QueryString(context, (QueryString) semanticObject); 
				return; 
			case MegalPackage.SELECTION:
				sequence_Selection(context, (Selection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MegalAnnotation returns MegalAnnotation
	 *
	 * Constraint:
	 *     (key=ANN_ID selection=Selection?)
	 */
	protected void sequence_MegalAnnotation(ISerializationContext context, MegalAnnotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MegalEntityType returns MegalEntityType
	 *
	 * Constraint:
	 *     (annotations+=MegalAnnotation* name=ID supertype=[MegalEntityType|ID]?)
	 */
	protected void sequence_MegalEntityType(ISerializationContext context, MegalEntityType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MegalEntity returns MegalEntity
	 *
	 * Constraint:
	 *     (annotations+=MegalAnnotation* name=ID type=[MegalEntityType|ID] (params+=[MegalEntity|ID] params+=[MegalEntity|ID]*)? many?='+'?)
	 */
	protected void sequence_MegalEntity(ISerializationContext context, MegalEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MegalFile returns MegalFile
	 *
	 * Constraint:
	 *     (
	 *         annotations+=MegalAnnotation* 
	 *         name=ID 
	 *         (
	 *             imports+=[MegalFile|ID] | 
	 *             declarations+=MegalEntityType | 
	 *             declarations+=MegalRelationshipType | 
	 *             declarations+=MegalEntity | 
	 *             declarations+=MegalRelationship | 
	 *             declarations+=MegalPair | 
	 *             bindings+=MegalLink
	 *         )*
	 *     )
	 */
	protected void sequence_MegalFile(ISerializationContext context, MegalFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MegalLink returns MegalLink
	 *
	 * Constraint:
	 *     (annotations+=MegalAnnotation* link=[MegalEntity|ID] (first=[MegalEntity|ID] second=[MegalEntity|ID])? to=STRING)
	 */
	protected void sequence_MegalLink(ISerializationContext context, MegalLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MegalPair returns MegalPair
	 *
	 * Constraint:
	 *     (annotations+=MegalAnnotation* set=[MegalEntity|ID] first=[MegalEntity|ID] second=[MegalEntity|ID])
	 */
	protected void sequence_MegalPair(ISerializationContext context, MegalPair semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MegalRelationshipType returns MegalRelationshipType
	 *
	 * Constraint:
	 *     (
	 *         annotations+=MegalAnnotation* 
	 *         name=ID 
	 *         left=[MegalEntityType|ID] 
	 *         (leftParams+=[MegalEntity|ID] leftParams+=[MegalEntity|ID]*)? 
	 *         (leftBoth?='(+)' | leftMany?='+')? 
	 *         right=[MegalEntityType|ID] 
	 *         (rightParams+=[MegalEntity|ID] rightParams+=[MegalEntity|ID]*)? 
	 *         (rightBoth?='(+)' | rightMany?='+')?
	 *     )
	 */
	protected void sequence_MegalRelationshipType(ISerializationContext context, MegalRelationshipType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MegalRelationship returns MegalRelationship
	 *
	 * Constraint:
	 *     (annotations+=MegalAnnotation* left=[MegalEntity|ID] type=[MegalRelationshipType|ID] right=[MegalEntity|ID])
	 */
	protected void sequence_MegalRelationship(ISerializationContext context, MegalRelationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryDefEntry returns QueryEntity
	 *     QueryRefEntry returns QueryEntity
	 *     QueryEntity returns QueryEntity
	 *
	 * Constraint:
	 *     entity=[MegalEntity|ID]
	 */
	protected void sequence_QueryEntity(ISerializationContext context, QueryEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MegalPackage.Literals.QUERY_ENTITY__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MegalPackage.Literals.QUERY_ENTITY__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryEntityAccess().getEntityMegalEntityIDTerminalRuleCall_0_1(), semanticObject.getEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryDefEntry returns QueryParam
	 *     QueryParam returns QueryParam
	 *
	 * Constraint:
	 *     (name=VAR_ID type=[MegalEntityType|ID]?)
	 */
	protected void sequence_QueryParam(ISerializationContext context, QueryParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryDefEntry returns QueryPos
	 *     QueryRefEntry returns QueryPos
	 *     QueryPos returns QueryPos
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_QueryPos(ISerializationContext context, QueryPos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MegalPackage.Literals.QUERY_POS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MegalPackage.Literals.QUERY_POS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryPosAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryRefEntry returns QueryReference
	 *     QueryReference returns QueryReference
	 *
	 * Constraint:
	 *     ref=[QueryParam|VAR_ID]
	 */
	protected void sequence_QueryReference(ISerializationContext context, QueryReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MegalPackage.Literals.QUERY_REFERENCE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MegalPackage.Literals.QUERY_REFERENCE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryReferenceAccess().getRefQueryParamVAR_IDTerminalRuleCall_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryStatement returns QueryStatement
	 *
	 * Constraint:
	 *     (subject=QueryRefEntry predicate=[MegalRelationshipType|ID] object=QueryRefEntry)
	 */
	protected void sequence_QueryStatement(ISerializationContext context, QueryStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MegalPackage.Literals.QUERY_STATEMENT__SUBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MegalPackage.Literals.QUERY_STATEMENT__SUBJECT));
			if (transientValues.isValueTransient(semanticObject, MegalPackage.Literals.QUERY_STATEMENT__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MegalPackage.Literals.QUERY_STATEMENT__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, MegalPackage.Literals.QUERY_STATEMENT__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MegalPackage.Literals.QUERY_STATEMENT__OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryStatementAccess().getSubjectQueryRefEntryParserRuleCall_0_0(), semanticObject.getSubject());
		feeder.accept(grammarAccess.getQueryStatementAccess().getPredicateMegalRelationshipTypeIDTerminalRuleCall_1_0_1(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getQueryStatementAccess().getObjectQueryRefEntryParserRuleCall_2_0(), semanticObject.getObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryDefEntry returns QueryString
	 *     QueryRefEntry returns QueryString
	 *     QueryString returns QueryString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_QueryString(ISerializationContext context, QueryString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MegalPackage.Literals.QUERY_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MegalPackage.Literals.QUERY_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Selection returns Selection
	 *
	 * Constraint:
	 *     (select+=QueryDefEntry select+=QueryDefEntry* query+=QueryStatement*)
	 */
	protected void sequence_Selection(ISerializationContext context, Selection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
